// eslint-disable-next-line @typescript-eslint/no-var-requires
require("dotenv").config();

import { app, BrowserWindow, ipcMain } from "electron";
import { convertToBase64 } from "utils";
import { proxyURL } from "utils/proxyURL";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  console.log("Running app in " + process.env.NODE_ENV + " mode.\n");

  // if (process.env.NODE_ENV === "development") {
  //   // Open the DevTools.
  //   mainWindow.webContents.openDevTools();
  // }
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

// IPC handlers
ipcMain.handle("greet", async (event, name: string) => {
  event.sender.send("process-output", { name });
  return name;
});

ipcMain.handle("get-cats", async (event, url) => {
  url = proxyURL(url);
  try {
    const response = await fetch(url);
    const json = await response.json();
    for (const image of json) {
      image.url = await convertToBase64(image.url);
    }
    return json;
  } catch (error) {
    return { error: error.message };
  }
});

ipcMain.handle("fetch-data", async (event, url) => {
  url = proxyURL(url);
  try {
    const response = await fetch(url);
    const json = await response.json();
    return json;
  } catch (error) {
    return { error: error.message };
  }
});

// async function fetchImageToBase64(url) {
//   try {
//     const response = await fetch(url);
//     const buffer = await response.buffer();
//     const base64Image = buffer.toString("base64");
//     const mimeType = response.headers.get("content-type");
//     const dataUrl = `data:${mimeType};base64,${base64Image}`;
//     return dataUrl;
//   } catch (error) {
//     console.error("Error fetching image:", error);
//     return null;
//   }
// }

// const fetchImageToBase64 = (url: string) =>
//   fetch(url)
//     .then((response) => response.blob())
//     .then(
//       (blob) =>
//         new Promise((resolve, reject) => {
//           const reader = new FileReader();
//           reader.onloadend = () => resolve(reader.result);
//           reader.onerror = reject;
//           reader.readAsDataURL(blob);
//         })
//     );

// // Example usage
// // fetchImageToBase64("https://example.com/image.jpg").then((base64String) => {
// //   console.log(base64String);
// // });

// Example usage
// convertToBase64("https://cdn2.thecatapi.com/images/NoQGHgPl7.jpg")
//   .then((base64String) => {
//     console.log(base64String); // Logs the Base64 string
//   })
//   .catch((error) => {
//     console.error("Error:", error);
//   });
